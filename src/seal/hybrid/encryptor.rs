use crate::algorithms::traits::{
    AsymmetricAlgorithm, KdfAlgorithm, SignatureAlgorithm, SymmetricAlgorithm, XofAlgorithm,
};
use crate::common::algorithms::{
    KdfAlgorithm as KdfAlgorithmEnum, SignatureAlgorithm as SignatureAlgorithmEnum,
    XofAlgorithm as XofAlgorithmEnum,
};
use crate::common::header::{DerivationInfo, KdfInfo, XofInfo};
use crate::common::{DerivationSet, SignerSet};
use crate::keys::{AsymmetricPrivateKey, AsymmetricPublicKey};
use crate::seal::hybrid::{DerivationOptions, HybridEncryptionOptions};
use seal_crypto::prelude::*;
use seal_crypto::schemes::asymmetric::post_quantum::dilithium::{
    Dilithium2, Dilithium3, Dilithium5,
};
use seal_crypto::schemes::asymmetric::traditional::ecc::{EcdsaP256, Ed25519};
use seal_crypto::schemes::kdf::hkdf::{HkdfSha256, HkdfSha384, HkdfSha512};
use seal_crypto::schemes::xof::shake::{Shake128, Shake256};
use seal_crypto::zeroize::Zeroizing;
use std::io::{Read, Write};
use std::marker::PhantomData;
use tokio::io::AsyncWrite;

/// A context for hybrid encryption operations, allowing selection of execution mode.
///
/// 混合加密操作的上下文，允许选择执行模式。
pub struct HybridEncryptor<S>
where
    S: SymmetricAlgorithm,
{
    pub(crate) pk: AsymmetricPublicKey,
    pub(crate) kek_id: String,
    pub(crate) aad: Option<Vec<u8>>,
    pub(crate) signer: Option<SignerSet>,
    pub(crate) derivation_config: Option<DerivationSet>,
    pub(crate) _phantom: PhantomData<S>,
}

impl<S> HybridEncryptor<S>
where
    S: SymmetricAlgorithm,
{
    /// Applies a set of pre-configured options to the encryptor.
    ///
    /// 将一组预先配置的选项应用于加密器。
    pub fn with_options(mut self, options: HybridEncryptionOptions) -> Self {
        if let Some(aad) = options.aad {
            self = self.with_aad(aad);
        }

        if let Some(signer_opts) = options.signer {
            match signer_opts.algorithm {
                SignatureAlgorithmEnum::Dilithium2 => {
                    self = self.with_signer::<Dilithium2>(signer_opts.key, signer_opts.key_id)
                }
                SignatureAlgorithmEnum::Dilithium3 => {
                    self = self.with_signer::<Dilithium3>(signer_opts.key, signer_opts.key_id)
                }
                SignatureAlgorithmEnum::Dilithium5 => {
                    self = self.with_signer::<Dilithium5>(signer_opts.key, signer_opts.key_id)
                }
                SignatureAlgorithmEnum::Ed25519 => {
                    self = self.with_signer::<Ed25519>(signer_opts.key, signer_opts.key_id)
                }
                SignatureAlgorithmEnum::EcdsaP256 => {
                    self = self.with_signer::<EcdsaP256>(signer_opts.key, signer_opts.key_id)
                }
            }
        }

        if let Some(derivation_opts) = options.derivation {
            self = match derivation_opts {
                DerivationOptions::Kdf(opts) => match opts.algorithm {
                    KdfAlgorithmEnum::HkdfSha256 => self.with_kdf::<HkdfSha256>(
                        HkdfSha256::default(),
                        opts.salt,
                        opts.info,
                        opts.output_len,
                    ),
                    KdfAlgorithmEnum::HkdfSha384 => self.with_kdf::<HkdfSha384>(
                        HkdfSha384::default(),
                        opts.salt,
                        opts.info,
                        opts.output_len,
                    ),
                    KdfAlgorithmEnum::HkdfSha512 => self.with_kdf::<HkdfSha512>(
                        HkdfSha512::default(),
                        opts.salt,
                        opts.info,
                        opts.output_len,
                    ),
                },
                DerivationOptions::Xof(opts) => match opts.algorithm {
                    XofAlgorithmEnum::Shake128 => self.with_xof::<Shake128>(
                        Shake128::default(),
                        opts.salt,
                        opts.info,
                        opts.output_len,
                    ),
                    XofAlgorithmEnum::Shake256 => self.with_xof::<Shake256>(
                        Shake256::default(),
                        opts.salt,
                        opts.info,
                        opts.output_len,
                    ),
                },
            };
        }

        self
    }

    /// Sets the Associated Data (AAD) for this encryption operation.
    ///
    /// 为此加密操作设置关联数据 (AAD)。
    pub fn with_aad(mut self, aad: impl Into<Vec<u8>>) -> Self {
        self.aad = Some(aad.into());
        self
    }

    /// Use a Key Derivation Function (KDF) to derive the Data Encryption Key (DEK)
    /// from the shared secret generated by the Key Encapsulation Mechanism (KEM).
    ///
    /// 使用密钥派生函数 (KDF) 从密钥封装机制 (KEM) 生成的共享秘密中派生数据加密密钥 (DEK)。
    pub fn with_kdf<Kdf>(
        mut self,
        deriver: Kdf,
        salt: Option<impl Into<Vec<u8>>>,
        info: Option<impl Into<Vec<u8>>>,
        output_len: u32,
    ) -> Self
    where
        Kdf: KdfAlgorithm + Send + Sync + 'static,
    {
        let salt = salt.map(|s| s.into());
        let info = info.map(|i| i.into());

        let kdf_info = KdfInfo {
            kdf_algorithm: Kdf::ALGORITHM,
            salt: salt.clone(),
            info: info.clone(),
            output_len,
        };

        let deriver_fn = Box::new(move |ikm: &[u8]| {
            deriver
                .derive(
                    ikm,
                    salt.as_deref(),
                    info.as_deref(),
                    output_len as usize,
                )
                .map(|dk| Zeroizing::new(dk.as_bytes().to_vec()))
                .map_err(|e| e.into())
        });

        self.derivation_config = Some(DerivationSet {
            derivation_info: DerivationInfo::Kdf(kdf_info),
            deriver_fn,
        });
        self
    }

    /// Use an Extendable-Output Function (XOF) to derive the Data Encryption Key (DEK).
    ///
    /// 使用可扩展输出函数 (XOF) 派生数据加密密钥 (DEK)。
    pub fn with_xof<Xof>(
        mut self,
        deriver: Xof,
        salt: Option<impl Into<Vec<u8>>>,
        info: Option<impl Into<Vec<u8>>>,
        output_len: u32,
    ) -> Self
    where
        Xof: XofAlgorithm + Send + Sync + 'static,
    {
        let salt = salt.map(|s| s.into());
        let info = info.map(|i| i.into());

        let xof_info = XofInfo {
            xof_algorithm: Xof::ALGORITHM,
            salt: salt.clone(),
            info: info.clone(),
            output_len,
        };

        let deriver_fn = Box::new(move |ikm: &[u8]| {
            let mut reader = deriver.reader(
                ikm,
                salt.as_deref(),
                info.as_deref(),
            )?;
            let mut dek_bytes = vec![0u8; output_len as usize];
            reader.read(&mut dek_bytes);
            Ok(Zeroizing::new(dek_bytes))
        });

        self.derivation_config = Some(DerivationSet {
            derivation_info: DerivationInfo::Xof(xof_info),
            deriver_fn,
        });
        self
    }

    /// Signs the encryption metadata (header) with the given private key.
    /// The signature ensures the integrity and authenticity of the encryption parameters.
    ///
    /// 使用给定的私钥对加密元数据（标头）进行签名。
    /// 签名确保了加密参数的完整性和真实性。
    pub fn with_signer<SignerAlgo>(
        mut self,
        signing_key: AsymmetricPrivateKey,
        signer_key_id: String,
    ) -> Self
    where
        SignerAlgo: SignatureAlgorithm + 'static,
    {
        self.signer = Some(SignerSet {
            signer_key_id,
            signer_algorithm: SignerAlgo::ALGORITHM,
            signer: Box::new(move |message, aad| {
                let sk = SignerAlgo::PrivateKey::from_bytes(signing_key.as_bytes())?;
                let mut data_to_sign = message.to_vec();
                if let Some(aad_data) = aad {
                    data_to_sign.extend_from_slice(aad_data);
                }
                SignerAlgo::sign(&sk, &data_to_sign)
                    .map(|s| s.0)
                    .map_err(|e| e.into())
            }),
        });
        self
    }

    /// Encrypts the given plaintext in-memory.
    ///
    /// 在内存中加密给定的明文。
    pub fn to_vec<A: AsymmetricAlgorithm>(self, plaintext: &[u8]) -> crate::Result<Vec<u8>>
    where
        A::EncapsulatedKey: Into<Vec<u8>> + Send,
        S::Key: From<Zeroizing<Vec<u8>>>,
    {
        let pk = A::PublicKey::from_bytes(self.pk.as_bytes())?;

        crate::hybrid::ordinary::encrypt::<A, S>(
            &pk,
            plaintext,
            self.kek_id,
            self.signer,
            self.aad.as_deref(),
            self.derivation_config,
        )
    }

    /// Encrypts the given plaintext in-memory using parallel processing.
    ///
    /// 使用并行处理在内存中加密给定的明文。
    pub fn to_vec_parallel<A: AsymmetricAlgorithm>(self, plaintext: &[u8]) -> crate::Result<Vec<u8>>
    where
        S::Key: From<Zeroizing<Vec<u8>>> + Send + Sync + Clone,
        A: AsymmetricAlgorithm,
        Vec<u8>: From<<A as seal_crypto::prelude::Kem>::EncapsulatedKey>,
    {
        let pk = A::PublicKey::from_bytes(self.pk.as_bytes())?;
        crate::hybrid::parallel::encrypt::<A, S>(
            &pk,
            plaintext,
            self.kek_id,
            self.signer,
            self.aad.as_deref(),
            self.derivation_config,
        )
    }

    /// Creates a streaming encryptor that writes to the given `Write` implementation.
    ///
    /// 创建一个流式加密器，该加密器写入给定的 `Write` 实现。
    pub fn into_writer<A: AsymmetricAlgorithm, W: Write>(
        self,
        writer: W,
    ) -> crate::Result<crate::hybrid::streaming::Encryptor<W, A, S>>
    where
        Vec<u8>: From<<A as seal_crypto::prelude::Kem>::EncapsulatedKey>,
        S::Key: From<Zeroizing<Vec<u8>>> + Clone,
    {
        let pk = A::PublicKey::from_bytes(self.pk.as_bytes())?;

        crate::hybrid::streaming::Encryptor::new(
            writer,
            &pk,
            self.kek_id,
            self.signer,
            self.aad.as_deref(),
            self.derivation_config,
        )
    }

    /// Encrypts data from a reader and writes to a writer using parallel processing.
    ///
    /// 使用并行处理从 reader 加密数据并写入 writer。
    pub fn pipe_parallel<A, R, W>(self, reader: R, writer: W) -> crate::Result<()>
    where
        R: Read + Send,
        W: Write,
        A: AsymmetricAlgorithm,
        A::EncapsulatedKey: Into<Vec<u8>> + Send,
        S::Key: From<Zeroizing<Vec<u8>>> + Send + Sync,
    {
        let pk = A::PublicKey::from_bytes(self.pk.as_bytes())?;
        crate::hybrid::parallel_streaming::encrypt::<A, S, R, W>(
            &pk,
            reader,
            writer,
            self.kek_id,
            self.signer,
            self.aad.as_deref(),
            self.derivation_config,
        )
    }

    /// [Async] Creates an asynchronous streaming encryptor.
    ///
    /// [异步] 创建一个异步流式加密器。
    #[cfg(feature = "async")]
    pub async fn into_async_writer<A, W>(
        self,
        writer: W,
    ) -> crate::Result<crate::hybrid::asynchronous::Encryptor<W, A, S>>
    where
        W: AsyncWrite + Unpin,
        A: AsymmetricAlgorithm + 'static,
        A::PublicKey: Send,
        A::EncapsulatedKey: Into<Vec<u8>> + Send,
        S: SymmetricAlgorithm,
        S::Key: From<Zeroizing<Vec<u8>>> + Send + Sync,
    {
        let pk = A::PublicKey::from_bytes(self.pk.as_bytes())?;
        crate::hybrid::asynchronous::Encryptor::new(
            writer,
            pk,
            self.kek_id,
            self.signer,
            self.aad.as_deref(),
            self.derivation_config,
        )
        .await
    }
}
